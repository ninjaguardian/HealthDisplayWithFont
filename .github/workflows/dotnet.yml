# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    env:
      LIBSDIRPATH: ${{ github.workspace }}/deps
      DepotDownloaderVer: DepotDownloader_3.4.0
      Cpp2ILVer: 2022.1.0-pre-release.19
        
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p deps
          for dep in $(jq -r '.dependencies[]' manifest.json); do
            # split "USER-PACKAGE-VER" into components
            IFS='-' read -r user pkg ver <<< "$dep"
            url="https://thunderstore.io/package/download/${user}/${pkg}/${ver}/"
            out="deps/${user}-${pkg}-${ver}.zip"
            echo "Fetching $url → $out"
            wget -O "$out" "$url"
          done
      - name: Download dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $deps = (Get-Content manifest.json | ConvertFrom-Json).dependencies
          New-Item -ItemType Directory -Force -Path deps | Out-Null
          foreach ($dep in $deps) {
            $parts = $dep -split '-'
            $user = $parts[0]; $pkg = $parts[1]; $ver = $parts[2]
            $url = "https://thunderstore.io/package/download/$user/$pkg/$ver"
            $out = "deps\$($user)-$($pkg)-$($ver).zip"
            Write-Host "Fetching $url → $out"
            Invoke-WebRequest -Uri $url -OutFile $out
          }

      - name: Unzip dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          for zip in deps/*.zip; do
            echo "Extracting $zip"
            unzip -n "$zip" -d deps
          done
      - name: Unzip dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Get-ChildItem deps\*.zip | ForEach-Object {
            $zip = $_.FullName
            Write-Host "Extracting $zip"
            Expand-Archive -Path $zip -DestinationPath deps -Force
          }

      - name: Install DepotDownloader (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -qO depotdl.zip \
            https://github.com/SteamRE/DepotDownloader/releases/download/${{ env.DepotDownloaderVer }}/DepotDownloader-linux-x64.zip
          mkdir depotdl
          unzip depotdl.zip -d depotdl
          chmod +x depotdl/DepotDownloader
      - name: Install DepotDownloader (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Invoke-WebRequest `
            -Uri "https://github.com/SteamRE/DepotDownloader/releases/download/${{ env.DepotDownloaderVer }}/DepotDownloader-windows-x64.zip" `
            -OutFile "depotdl.zip"
          Expand-Archive -Path depotdl.zip -DestinationPath depotdl

      - name: Fetch Game Files (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          ./depotdl/DepotDownloader \
            -app 890550 \
            -depot 890551 \
            -username "${{ secrets.STEAM_USERNAME }}" \
            -password "${{ secrets.STEAM_PASSWORD }}" \
            -dir ./game_files
      - name: Fetch Game Files (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          .\depotdl\DepotDownloader.exe `
            -app 890550 `
            -depot 890551 `
            -username "${{ secrets.STEAM_USERNAME }}" `
            -password "${{ secrets.STEAM_PASSWORD }}" `
            -dir .\game_files

      - name: Install Cpp2IL (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget -qO cpp2il https://github.com/SamboyCoding/Cpp2IL/releases/download/${{ env.Cpp2ILVer }}/Cpp2IL-${{ env.Cpp2ILVer }}-Linux
          chmod +x cpp2il
          sudo mv cpp2il /usr/local/bin/
          
      - name: Run Cpp2IL (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p deps/Il2CppAssemblies
          cpp2il \
            --game-path game_files \
            --just-give-me-dlls-asap-dammit \
            --output-dir deps/MelonLoader/Il2CppAssemblies

      - name: Clean files in deps (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: find deps/ -maxdepth 1 -type f -delete
      - name: Clean files in deps (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: Get-ChildItem -Path "deps" -File | Remove-Item -Force

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
        
      - name: Build
        run: dotnet build --configuration Release /p:LIBSDIRPATH=${{ env.LIBSDIRPATH }}
      
      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal /p:LIBSDIRPATH=${{ env.LIBSDIRPATH }}
